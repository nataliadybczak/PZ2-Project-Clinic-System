// <auto-generated />
using System;
using MediCode.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MediCode.Migrations
{
    [DbContext(typeof(MediCodeContext))]
    [Migration("20250524152908_AddTokenToLekarz")]
    partial class AddTokenToLekarz
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.1");

            modelBuilder.Entity("MediCode.Models.Choroba", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Data")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Opis")
                        .HasColumnType("TEXT");

                    b.Property<int>("PacjentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PacjentId");

                    b.ToTable("Choroby");
                });

            modelBuilder.Entity("MediCode.Models.Lekarz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Haslo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Specjalizacja")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Lekarze");
                });

            modelBuilder.Entity("MediCode.Models.Pacjent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DodanyPrzezId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Pesel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DodanyPrzezId");

                    b.HasIndex("Pesel")
                        .IsUnique();

                    b.ToTable("Pacjenci");
                });

            modelBuilder.Entity("MediCode.Models.Wizyta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataWizyty")
                        .HasColumnType("TEXT");

                    b.Property<int>("LekarzId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PacjentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LekarzId");

                    b.HasIndex("PacjentId");

                    b.ToTable("Wizyty");
                });

            modelBuilder.Entity("MediCode.Models.Choroba", b =>
                {
                    b.HasOne("MediCode.Models.Pacjent", "Pacjent")
                        .WithMany("Choroby")
                        .HasForeignKey("PacjentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pacjent");
                });

            modelBuilder.Entity("MediCode.Models.Pacjent", b =>
                {
                    b.HasOne("MediCode.Models.Lekarz", "DodanyPrzez")
                        .WithMany("DodaniPacjenci")
                        .HasForeignKey("DodanyPrzezId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("DodanyPrzez");
                });

            modelBuilder.Entity("MediCode.Models.Wizyta", b =>
                {
                    b.HasOne("MediCode.Models.Lekarz", "Lekarz")
                        .WithMany("Wizyty")
                        .HasForeignKey("LekarzId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediCode.Models.Pacjent", "Pacjent")
                        .WithMany("Wizyty")
                        .HasForeignKey("PacjentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Lekarz");

                    b.Navigation("Pacjent");
                });

            modelBuilder.Entity("MediCode.Models.Lekarz", b =>
                {
                    b.Navigation("DodaniPacjenci");

                    b.Navigation("Wizyty");
                });

            modelBuilder.Entity("MediCode.Models.Pacjent", b =>
                {
                    b.Navigation("Choroby");

                    b.Navigation("Wizyty");
                });
#pragma warning restore 612, 618
        }
    }
}
